 FROM - specifies the base(parent) image. Alpine version is the minimal docker image based on Alpine Linux which is only 5mb in size.
 RUN - runs a Linux command. Used to install packages into container, create folders, etc
 ENV - sets environment variable. We can have multiple variables in a single dockerfile.
 COPY - copies files and directories to the container.
 EXPOSE - expose ports
 ENTRYPOINT - provides command and arguments for an executing container.
              Allows you to configure a container that will run as an executable.
              The shell form prevents any CMD or run command line arguments from being used, but the ENTRYPOINT will start via the shell. 
              This means the executable will not be PID 1 nor will it receive UNIX signals. Prepend exec to get around this drawback.
              Only the last ENTRYPOINT instruction in the Dockerfile will have an effect.
 CMD - provides a command and arguments for an executing container. There can be only one CMD.
        The main purpose of a CMD is to provide defaults for an executing container. These defaults can include an executable, or 
        they can omit the executable, in which case you must specify an ENTRYPOINT instruction as well.
        There can only be one CMD instruction in a Dockerfile. If you list more than one CMD then only the last CMD will take effect.
 VOLUME - create a directory mount point to access and store persistent data.
 WORKDIR - sets the working directory for the instructions that follow.
 LABEL - provides metada like maintainer.
 ADD - Copies files and directories to the container. Can unpack compressed files.
 ARG - Define build-time variable.
2. COPY vs. ADD
 Both commands serve a similar purpose, to copy files into the image.
 COPY - let you copy files and directories from the host.
 ADD - does the same. Additionally it lets you use URL location and unzip files into image
3. ENTRYPOINT vs. CMD
 CMD - allows you to set a default command which will be executed only when you run a container without specifying a command. 
 If a Docker container runs with a command, the default command will be ignored.
 ENTRYPOINT - allows you to configure a container that will run as an executable. ENTRYPOINT command and parameters are not ignored when Docker container runs 
 with command line parameters.
4. VOLUME
You declare VOLUME  in your Dockerfile to denote where your container will write application data. When you run your container using -v   
you can specify its mounting point
Multi Stage Docker 
                        FROM openjdk:8-jdk-alpine3.7 AS builder
                        RUN java -version

                        COPY . /usr/src/myapp/
                        WORKDIR /usr/src/myapp/
                        RUN apk --no-cache add maven && mvn --version
                        RUN mvn package

                        # Stage 2 (to create a downsized ""container executable"", ~87MB)
                        FROM openjdk:8-jre-alpine3.7
                        WORKDIR /root/
                        COPY --from=builder /usr/src/myapp/target/app.jar .

                        EXPOSE 8123
                        ENTRYPOINT [""java"", ""-jar"", ""./app.jar""]"
Dockerfile
                    FROM openjdk:8-jre-alpine3.7
                    WORKDIR /root/
                    COPY --from=builder /usr/src/myapp/target/app.jar .
                    EXPOSE 8123
                    ENTRYPOINT [""java"", ""-jar"", ""./app.jar""]"

